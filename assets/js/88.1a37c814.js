(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{403:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("create date: 2023-04-14 18:51"),t("br"),s._v("\nStatus: #idea"),t("br"),s._v("\nTags:")]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"java中的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java中的继承"}},[s._v("#")]),s._v(" java中的继承")]),s._v(" "),t("p",[s._v("为了解决代码复用问题，对多个类存在相同属性与方法时抽象出父类。子类通过继承这些属性实现代码的复用。\n"),t("img",{attrs:{src:"https://pic-1312640559.cos.ap-chengdu.myqcloud.com/img/20230414190842.png",alt:"image.png"}})]),s._v(" "),t("p",[s._v("语法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("learning"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("extend_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n  \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pupil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小学生  "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"正在考小学数学。。"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("子类不能直接访问私有属性与方法（但其实它已经继承了所有的属性与方法，只是有的不能直接访问），要通过公共的方法去访问。 同时，子类也不具有能访问默认属性与方法的能力，但如果子类与父类在同一个包里，则不用因为同一个包的类可以访问默认修饰符修饰的类。\n"),t("img",{attrs:{src:"https://pic-1312640559.cos.ap-chengdu.myqcloud.com/img/20230414194007.png",alt:"image.png"}})])]),s._v(" "),t("li",[t("p",[s._v("子类会在构造器中默认使用"),t("code",[s._v("super()")]),s._v("，调用父类的无参构造器，如果父类没有无参构造器，则需要在子类的构造器中用"),t("code",[s._v("supe(参数列表)")]),s._v("去指定使用父类的哪个构造器，以完成父类的初始化")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("super")]),s._v("在子类构造器的第一行，因此与this调用构造器的方式冲突，在使用了this()调用构造器时，原本默认的super方法会失效，但在this()调用的构造器中仍会继续调用super();")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("Object")]),s._v("是所有类的基类")])]),s._v(" "),t("li",[t("p",[s._v("父类构造器的调用不限于直接父类！将一直往上追溯直到Objects类（顶级父类）")])]),s._v(" "),t("li",[t("p",[s._v("子类最多只能直接继承一个父类，即java是单继承机制，为了实现一个类继承多个类的效果，可以让子类的父类去继承另外需要继承的类")])])]),s._v(" "),t("h2",{attrs:{id:"内存布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存布局"}},[s._v("#")]),s._v(" 内存布局")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://pic-1312640559.cos.ap-chengdu.myqcloud.com/img/20230414202704.png",alt:"image.png|1275"}})]),s._v(" "),t("ul",[t("li",[s._v("子类调用属性时，会先判断子类是否存在该属性，没有会沿着继承的父类向上搜索，直到找到可能返回的值，但在向上搜索的过程中遇到了private的属性或方法时，会阻塞不在向上搜索并报错")]),s._v(" "),t("li",[s._v("在父类中的方法中访问属性时，访问的是该方法所在父类的属性，而不是子类中同名的属性，这与动态绑定有关，如果子类有同名的方法，那么自然会使用子类的方法。但动态绑定对属性无效，所以即使在子类中调用的父类方法存在使用的属性在子类与父类中都存在时，由于没有动态绑定，所以使用的就是方法所在的类的属性。")]),s._v(" "),t("li",[s._v("继承的基本思想：父类的构造器完成父类的初始化，子类的构造器完成子类的初始化")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("learning"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("extend_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n  \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pupil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" weight "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小学生  "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"正在小学数学。。"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"the weight of pupil is "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getWeight")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结果为0，是父类中定义了getWeight方法所在类的属性")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h2",{attrs:{id:"super的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#super的使用"}},[s._v("#")]),s._v(" super的使用")]),s._v(" "),t("ul",[t("li",[s._v("可以访问父类的属性，但不能访问父类的私有属性")]),s._v(" "),t("li",[s._v("super与直接使用属性或方法（或使用this）相比，跳过了第一步对所在子类的属性的方法的查找")])]),s._v(" "),t("h2",{attrs:{id:"方法重写-覆盖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法重写-覆盖"}},[s._v("#")]),s._v(" 方法重写/覆盖")]),s._v(" "),t("ul",[t("li",[s._v("子类的方法和父类的方法具有相同的函数原型（名称、返回类型、参数一样），子类会对父类产生覆盖，且父类可能不是直接父类，指代的是上级类。")]),s._v(" "),t("li",[s._v("在重写时，子类方法的返回类型与父类方法的返回类型一致或是父类的方法返回类型的子类时，才可以实现方法的覆盖；如果不满足，则无法编译。")]),s._v(" "),t("li",[s._v("[ ] 子类方法不能缩小父类方法的访问权限 为什么会有这种规定呢？")]),s._v(" "),t("li",[s._v("重载与重写的区别：\n"),t("img",{attrs:{src:"https://pic-1312640559.cos.ap-chengdu.myqcloud.com/img/20230415134426.png",alt:"image.png"}})])]),s._v(" "),t("h2",{attrs:{id:"继承时的内存图解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承时的内存图解"}},[s._v("#")]),s._v(" 继承时的内存图解")]),s._v(" "),t("p",[s._v("参考："),t("a",{attrs:{href:"https://developer.aliyun.com/article/1182849",target:"_blank",rel:"noopener noreferrer"}},[s._v("java 继承关系的内存图解 （通俗易懂)-阿里云开发者社区 (aliyun.com)"),t("OutboundLink")],1)]),s._v(" "),t("h1",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[s._v("#")]),s._v(" references")])])}),[],!1,null,null,null);t.default=e.exports}}]);