(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{469:function(a,s,e){"use strict";e.r(s);var n=e(8),v=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"哈希表是牺牲了空间换取时间吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表是牺牲了空间换取时间吗"}},[a._v("#")]),a._v(" 哈希表是牺牲了空间换取时间吗")]),a._v(" "),s("ul",[s("li",[a._v("哈希表的大小通常大于实际数据的大小")])]),a._v(" "),s("h2",{attrs:{id:"哈希表的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表的定义"}},[a._v("#")]),a._v(" 哈希表的定义")]),a._v(" "),s("p",[a._v("哈希表（Hash Table），也被称为散列表，是一种基于哈希函数（Hash Function）实现的数据结构。它通过将数据元素与特定的索引关联起来，以实现快速的插入、删除和查找操作。")]),a._v(" "),s("p",[a._v("哈希表的核心思想是使用哈希函数将数据元素映射到一个固定大小的数组（通常称为哈希表或哈希桶），每个数组位置称为一个槽（Slot）或存储桶（Bucket）。哈希函数将数据元素转换为哈希值，然后使用哈希值来确定元素在数组中的存储位置。")]),a._v(" "),s("p",[a._v("当需要插入或查找元素时，通过哈希函数计算元素的哈希值，并使用该哈希值作为索引访问数组中相应的位置。如果存在冲突（即不同的元素映射到相同的索引），则可以使用解决冲突的方法来处理，常见的方法包括链地址法（Chaining）和开放地址法（Open Addressing）。")]),a._v(" "),s("p",[a._v("哈希表的优点在于它可以提供快速的插入、删除和查找操作，平均情况下的时间复杂度为O(1)。然而，最坏情况下的时间复杂度可能为O(n)，其中n是哈希表中存储的元素数量。此外，哈希表需要较大的内存空间来存储哈希桶和处理冲突所需的额外数据结构。")]),a._v(" "),s("p",[a._v("哈希表在许多应用中被广泛使用，例如数据库索引、缓存实现、字典和集合等。它提供了高效的数据访问和操作，使得在大多数情况下，哈希表是一种优秀的选择。")]),a._v(" "),s("h2",{attrs:{id:"一个不错的示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个不错的示例"}},[a._v("#")]),a._v(" 一个不错的示例")]),a._v(" "),s("p",[a._v("当你需要存储一组学生信息，包括学生的姓名和对应的分数时，可以使用哈希表来实现。")]),a._v(" "),s("p",[a._v("假设有以下学生信息：")]),a._v(" "),s("ul",[s("li",[a._v("学生1：姓名 - Alice，分数 - 85")]),a._v(" "),s("li",[a._v("学生2：姓名 - Bob，分数 - 90")]),a._v(" "),s("li",[a._v("学生3：姓名 - Charlie，分数 - 75")])]),a._v(" "),s("p",[a._v("首先，我们创建一个哈希表，可以是一个数组，大小足够容纳所有学生信息。在这个例子中，我们使用索引0到2的数组槽来表示学生信息。")]),a._v(" "),s("p",[a._v("初始状态的哈希表如下：")]),a._v(" "),s("p",[a._v("basic")]),a._v(" "),s("p",[a._v("复制")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Index  |  Data\n-----------------\n0      |\n1      |\n2      |\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("接下来，我们使用哈希函数来确定每个学生应该存储在哈希表中的位置。一个简单的哈希函数可以是将学生姓名的字母ASCII码的总和除以数组大小并取余。")]),a._v(" "),s("p",[a._v("对于学生1（Alice），计算哈希值：(65 + 108 + 105 + 99 + 101) % 3 = 11 % 3 = 2。因此，学生1将被存储在索引2的位置。")]),a._v(" "),s("p",[a._v("更新后的哈希表如下：")]),a._v(" "),s("p",[a._v("basic")]),a._v(" "),s("p",[a._v("复制")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Index  |  Data\n-----------------\n0      |\n1      |\n2      |  Alice - 85\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("对于学生2（Bob），计算哈希值：(66 + 111 + 98) % 3 = 21 % 3 = 0。因此，学生2将被存储在索引0的位置。")]),a._v(" "),s("p",[a._v("更新后的哈希表如下：")]),a._v(" "),s("p",[a._v("basic")]),a._v(" "),s("p",[a._v("复制")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Index  |  Data\n-----------------\n0      |  Bob - 90\n1      |\n2      |  Alice - 85\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("对于学生3（Charlie），计算哈希值：(67 + 104 + 97 + 114 + 108 + 105 + 101) % 3 = 696 % 3 = 0。由于索引0已经被占用，发生了冲突。")]),a._v(" "),s("p",[a._v("解决冲突的一种常见方法是使用链地址法。我们将在索引0的位置创建一个链表，并将冲突的元素逐个添加到链表中。")]),a._v(" "),s("p",[a._v("更新后的哈希表如下：")]),a._v(" "),s("p",[a._v("basic")]),a._v(" "),s("p",[a._v("复制")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Index  |  Data\n-----------------\n0      |  Bob - 90 -> Charlie - 75\n1      |\n2      |  Alice - 85\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("现在，我们可以通过哈希表快速查找学生的分数。例如，要查找学生2（Bob）的分数，我们使用哈希函数计算其哈希值为0，然后访问索引0的位置，找到Bob的分数为90。")]),a._v(" "),s("p",[a._v("哈希表的优势在于无论哈希表的大小如何，查找、插入和删除操作的时间复杂度都是常数级别的，而不会随着数据量的增加而线性增加，从而实现了高效的数据操作。")]),a._v(" "),s("p",[a._v("上面的例子中如果要找到Charlie的分数呢")]),a._v(" "),s("p",[a._v('对于哈希表中的名为"Charlie"的学生，我们可以按照以下步骤找到他的分数：')]),a._v(" "),s("ol",[s("li",[s("p",[a._v('使用哈希函数计算"Charlie"的哈希值。假设计算得到的哈希值为h。')])]),a._v(" "),s("li",[s("p",[a._v("使用哈希值h作为索引，访问哈希表中的对应位置。")])]),a._v(" "),s("li",[s("p",[a._v('如果该位置为空，则表示哈希表中没有存储"Charlie"的信息，因此无法找到他的分数。')])]),a._v(" "),s("li",[s("p",[a._v("如果该位置不为空，可能存在两种情况："),s("br"),a._v('\na. 在该位置找到了存储的数据，但是数据并不是"Charlie"的信息。这种情况可能发生冲突，即不同的键映射到了同一个索引。在这种情况下，需要继续搜索链表或其他冲突解决结构，直到找到"Charlie"的信息或到达链表末尾。'),s("br"),a._v('\nb. 在该位置找到了存储的数据，并且数据与"Charlie"匹配。这意味着我们找到了"Charlie"的信息，并且可以获取他的分数。')])])]),a._v(" "),s("p",[a._v('在上述示例中，我们可以按照上述步骤来找到"Charlie"的分数。根据哈希函数的计算，假设"Charlie"的哈希值为h，并使用h作为索引访问哈希表中对应的位置。')]),a._v(" "),s("p",[a._v('在索引0的位置，我们找到了一个链表，包含了存储的数据。我们需要遍历链表，逐个检查数据，直到找到"Charlie"的信息。')]),a._v(" "),s("p",[a._v('在这个例子中，我们遍历链表的过程中，找到了"Charlie"的信息，并且可以获取他的分数为75。')]),a._v(" "),s("p",[a._v('因此，通过哈希表的查找过程，我们能够快速找到"Charlie"的分数。')])])}),[],!1,null,null,null);s.default=v.exports}}]);