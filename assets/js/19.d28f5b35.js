(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{331:function(s,n,t){"use strict";t.r(n);var a=t(8),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("create date: 2022-11-30 22:03"),n("br"),s._v("\nStatus: #notes\nTags: [[FPGA]]")]),s._v(" "),n("hr"),s._v(" "),n("h1",{attrs:{id:"fpga-verilog-基础知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fpga-verilog-基础知识"}},[s._v("#")]),s._v(" FPGA-verilog 基础知识")]),s._v(" "),n("h1",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[s._v("#")]),s._v(" references")]),s._v(" "),n("ul",[n("li",[s._v("夏宇闻-《Verilog数字系统设计》")]),s._v(" "),n("li",[s._v("《数字逻辑基础与Verilog设计》")]),s._v(" "),n("li",[s._v("野火的在线文档："),n("a",{attrs:{href:"https://doc.embedfire.com/fpga/altera/ep4ce10_mini/zh/latest/fpga/Multiplexer.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("3. 简单组合逻辑 — 多路选择器 — [野火]FPGA Verilog开发实战指南——基于Altera EP4CE10 征途Mini开发板 文档 (embedfire.com)"),n("OutboundLink")],1),s._v(" "),n("strong",[s._v("笔记：")]),s._v("\n1 简单组合逻辑：")]),s._v(" "),n("li",[s._v("有人可能会有稍稍的疑问，就是为什么always块中被赋值的一定要是reg型变量，他并没有生成寄存器而是实现的的组合逻辑的功能？因为在Verilog语言中，寄存器的特点是，它需要在仿真运行器件中保存其值，也就是说这个变量在仿真时需要占据内存空间，而上面的always块只对sel、in1、in2三个变量 的输入敏感，如果没有这三个变量的变化事件，则out变量将需要保存其值，因此它们必须被定义为reg型变量，但是在综合之后，并不对应硬件锁存器或者触发器（后面会讲到什么时候会出现综合成这两种的情况）。")]),s._v(" "),n("li",[s._v("如果case不能列举出所有的情况一定要加default，此处sel只有两种情况，并且完全列举了，所以default可以省略,这里是为了防止生成锁存器。")]),s._v(" "),n("li",[s._v("根据上面RTL代码综合出的RTL视图如图 10‑8所示，我们发现这并不是最基本的门电路，而是一个多路器的符号，之前不是说数字电路不都是由最基本的门电路构成的吗，这个为什么不是呀？因为我们描述的角度不同，我们是从寄存器传输级这个层次来描述的，最基本的单元可能就是这些寄存器、多路器、译码器、比较器、加法 器等等，这些基本的单元再往底层划分还是可以由其他的门电路构成的，所以在描述这些电路功能时我们也可以用最基本的门电路来描述，那我们最后看到的RTL视图就是由门电路构成的了，其缺点就是效率太低。既然我们可以从更高的层次描述实现的功能来提高效率，为什么还要用低层次的描述方式呢，所以基于门级的描述我们很少用 ，大家在看其他资料的时候有很多都是将这两者混在一起讲的，这样是让初学者感觉迷惑的地方。那就有人问了还有没有更高层次的描述方法？当然有，比寄存器传输级还高的描述方式有算法级和系统级，将会使用到更高级的语言，如System Verilog和Ssytem C，也可以使用C和C++再通过高层次综合（High-level Synthesis，HLS）的方式来实现。")]),s._v(" "),n("li",[s._v("测试代码：")])]),s._v(" "),n("div",{staticClass:"language-verilog line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-verilog"}},[n("code",[s._v("\\"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("`timescale")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("ns"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("ns "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//时间尺度、精度单位定义，决定“#（不可被综合，但在可")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//综合代码中也可以写，只是会在仿真时表达效果，而综合")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//时会自动被综合器优化掉）”后面的数字表示的时间尺度和")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//精度，具体表达含义为:“时间尺度/时间精度”。为了以后")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编写方便我们将该句放在所有“.v”文件的开头，后面的代")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//码示例将不再显示该句")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("tb_mux2_1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//testbench的格式和待测试RTL模块的格式相同")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//也是以“module”开始以“endmodule”结束，所有的代码都要")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在它们中间编写。不同的是在testbench中端口列表为空")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//因为testbench不对外进行信号的输入输出，只是自己产生")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//激励信号提供给内部实例化待测RTL模块使用，所以端口列表")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//中没有内容，只是列出“()”，当然可以将“()”省略，括号")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后有个“;”不要忘记")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//要在initial块和always块中被赋值的变量一定要是reg型")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在testbench中待测试RTL模块的输入永远是reg型变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("reg")]),s._v(" in1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("reg")]),s._v(" in2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("reg")]),s._v(" sel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出信号，我们直接观察，也不用在任何地方进行赋值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所以是wire型变量（在testbench中待测试RTL模块的输出永远是wire型变量）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("wire")]),s._v(" out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//initial语句是可以被综合的，一般只在testbench中表达而不在RTL代码中表达")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//initial块中的语句上电后只执行一次，主要用于初始化仿真中要输入的信号")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化值在没有特殊要求的情况下给0或1都可以。如果不赋初值，仿真时信号")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//会显示为不定态（ModelSim中的波形显示红色）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("initial")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在仿真中begin...end块中的内容都是顺序执行的，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在没有延时的情况下几乎没有差别，看上去是同时执行的，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果有延时才能表达的比较明了；")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//而在rtl代码中begin...end相当于括号的作用，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在同一个always块中给多个变量赋值的时候要加上")]),s._v("\nin1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1'b0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nin2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1'b0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsel "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1'b0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//in1:产生输入随机数，模拟输入端1的输入情况")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token important"}},[s._v("always")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("#10")]),s._v(" in1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$random")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//取模求余数，产生随机数1'b0、1'b1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//每隔10ns产生一次随机数")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//in2:产生输入随机数，模拟输入端2的输入情况")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token important"}},[s._v("always")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("#10")]),s._v(" in2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$random")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//sel:产生输入随机数，模拟选择端的输入情况")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token important"}},[s._v("always")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("#10")]),s._v(" sel "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$random")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//下面的语句是为了在ModelSim仿真中直接打印出来信息便于观察信号变化的状态")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//也可以不使用下面的语句而直接观察仿真出的波形")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//------------------------------------------------------------")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("initial")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$timeformat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ns"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置显示的时间格式，此处表示的是(打印时间单")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//位为纳秒，小数点后打印的小数位为0位，时间值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后打印的字符串为“ns”，打印的最小数量字符为6个)")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只要监测的变量（时间、in1, in2, sel, out）发生变化，就会打印出相应的信息")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$monitor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"@time %t:in1=%b in2=%b sel=%b out=%b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token kernel-function property"}},[s._v("$time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("in1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("in2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("sel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//------------------------------------------------------------")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//待测试RTL模块的实例化，相当于将待测试模块放到测试模块中，并将输入输出对应连接上")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//测试模块中产生激励信号给待测试模块的输入，以观察待测试模块的输出信号是否正确")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//------------------------mux2_1_inst------------------------")]),s._v("\nmux2_1 mux2_1_inst "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//第一个是被实例化模块的名子，第二个是我们自己定义的在另一个")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//模块中实例化后的名字。同一个模块可以在另一个模块中或不同的")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//另外模块中被多次实例化，第一个名字相同，第二个名字不同")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//前面的“in1”表示被实例化模块中的信号，后面的“in1”表示实例化该模块并要和这个")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//模块的该信号相连接的信号（可以取名不同，一般取名相同，方便连接和观察）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//“.”可以理解为将这两个信号连接在一起")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("in1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("in1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//input in1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("in2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("in2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//input in2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//inputsel")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("out")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//output out")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("endmodule")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);