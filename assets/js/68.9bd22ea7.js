(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{378:function(e,t,a){"use strict";a.r(t);var r=a(8),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("create date: 2024-07-10 19:37"),t("br"),e._v("\nStatus: #idea"),t("br"),e._v("\nTags:")]),e._v(" "),t("hr"),e._v(" "),t("blockquote",[t("p",[e._v("a fantasy website: learngitbranching.js.org, before the tutorial, in 菜鸟教程 , the concept of workspace/stage/repository is clear")])]),e._v(" "),t("h3",{attrs:{id:"git-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[e._v("#")]),e._v(" git commit")]),e._v(" "),t("p",[e._v("ez: stage->repository")]),e._v(" "),t("h3",{attrs:{id:"git-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[e._v("#")]),e._v(" git branch")]),e._v(" "),t("p",[e._v("ez")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git branch <branch name> <position>")])]),e._v(" "),t("li",[e._v("change history : "),t("code",[e._v("git branch -f main HEAD~3")])]),e._v(" "),t("li",[e._v("[x] git checkout moves the positon of HEAD, git branch moves the position of current branch, so what happens when the HEAD is dettached from branch? ans: HEAD doesn't change, the positon of main changed.")])]),e._v(" "),t("h3",{attrs:{id:"git-merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[e._v("#")]),e._v(" git merge")]),e._v(" "),t("ul",[t("li",[e._v("merge the file, need fix the conflicts if there is one file differs in two branch.")]),e._v(" "),t("li",[e._v("when merge another branch in, that brach still exists, when you checkout to that branch and merge this branch in, two branch'history synchronized.(when one branch merge a branch which  inherits from it will make the history synchronized )")])]),e._v(" "),t("h3",{attrs:{id:"git-rebase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[e._v("#")]),e._v(" git rebase")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git rebase <base position> <source branch position>")])]),e._v(" "),t("li",[e._v("construct a more linear history")]),e._v(" "),t("li",[e._v("simiarly, when you rebase another branch which inherits from this branch, it will not change the history, just move the position of the branch")])]),e._v(" "),t("h4",{attrs:{id:"head"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[e._v("#")]),e._v(" HEAD")]),e._v(" "),t("p",[e._v("current branch\ndettached HEAD : make HEAD point to a specific committed record, rather than a branch.")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#before\nHEAD->main-> C1\n#after git checkout C1\nHEAD->C1\nmain->C1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("code",[e._v("git checkout")]),e._v(" 's target is the where HEAD is going to point to.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("^")]),e._v(" , move one step back,"),t("code",[e._v("^^")]),e._v("means two steps")]),e._v(" "),t("li",[t("code",[e._v("~<num>")]),e._v(" move <num> steps back")])]),e._v(" "),t("h3",{attrs:{id:"cancel-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cancel-changes"}},[e._v("#")]),e._v(" cancel changes")]),e._v(" "),t("ul",[t("li",[e._v("git reset: delete changes and changed branch\ndid not apply to remote repository's branch")]),e._v(" "),t("li",[e._v("git revert: delete changes and add a new branch,and git reset 's  target is HEAD^1, git revert 's target is HEAD")])]),e._v(" "),t("h3",{attrs:{id:"collate-submission-records"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collate-submission-records"}},[e._v("#")]),e._v(" collate submission records")]),e._v(" "),t("ul",[t("li",[e._v("git cherry-pick: multi targets, simiar to rebase, but not move, pick!")]),e._v(" "),t("li",[e._v("interactive rebase: git rebase -i HEAD~4")]),e._v(" "),t("li",[e._v("git commit --amend, cover last commit when commit")])]),e._v(" "),t("h3",{attrs:{id:"git-tag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[e._v("#")]),e._v(" git tag")]),e._v(" "),t("ul",[t("li",[e._v("highlight and anchor a submission record")]),e._v(" "),t("li",[e._v("use "),t("code",[e._v("git describe")]),e._v(" to describe the closest tag")])]),e._v(" "),t("h1",{attrs:{id:"git教程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git教程"}},[e._v("#")]),e._v(" git教程")]),e._v(" "),t("h1",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" references")]),e._v(" "),t("ul",[t("li",[e._v("pro git")]),e._v(" "),t("li",[e._v("cswiki")])])])}),[],!1,null,null,null);t.default=s.exports}}]);