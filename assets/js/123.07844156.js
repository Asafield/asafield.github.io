(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{435:function(s,n,a){"use strict";a.r(n);var t=a(8),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("create date: 2023-10-21 12:18"),n("br"),s._v("\nStatus: #idea"),n("br"),s._v("\nTags:  [[嵌入式]] [[stm32]]")]),s._v(" "),n("hr"),s._v(" "),n("h1",{attrs:{id:"stm32启动文件的说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stm32启动文件的说明"}},[s._v("#")]),s._v(" stm32启动文件的说明")]),s._v(" "),n("p",[s._v("名为startup_stm32xxxxx.s的文件，它里边使用了汇编语言写好了基本程序，为c语言建立起运行环境。对于f4系列来说，该文件使用的汇编指令是Cortex-M4内核支持的指令，可从《Cortex-M4 Technical Reference Manual》查到，也可参考《Cortex-M3权威指南中文》，M3跟M4大部分汇编指令相同。其功能如下：")]),s._v(" "),n("ul",[n("li",[s._v("初始化堆栈指针SP")]),s._v(" "),n("li",[s._v("初始化程序计数器指针PC")]),s._v(" "),n("li",[s._v("设置堆、栈的大小")]),s._v(" "),n("li",[s._v("初始化中断向量表")]),s._v(" "),n("li",[s._v("配置外部SRAM作为数据存储器（这个由用户配置，一般的开发板没有外部SRAM）；")]),s._v(" "),n("li",[s._v("调用SystemInit()函数配置STM32的系统时钟")]),s._v(" "),n("li",[s._v("设置C库的分支入口 "),n("code",[s._v('" __main"')]),s._v("(最终用来调用main函数）")])]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("Reset handler\n\n Reset_Handler PROC\n\n EXPORT Reset_Handler "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WEAK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n IMPORT SystemInit\n\n IMPORT __main\n\n LDR R0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("SystemInit\n\n BLX R0\n\n LDR R0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("__main\n\n     BX R0\n\n     ENDP\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("我们需要在外部定义一个SystemInit函数设置STM32的时钟；STM32上电后，会执行SystemInit函数，最后执行我们C语言中的main函数。")]),s._v(" "),n("ul",[n("li",[s._v("当我们不配置系统时钟时，STM32芯片会自动将内部的高速时钟HIS（16M）作为系统时钟，程序还是能跑的，只是跑的比较慢（通常情况下， 我们会把系统时钟设置为168M，远远大于HIS的16M）。")])]),s._v(" "),n("h1",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[s._v("#")]),s._v(" references")])])}),[],!1,null,null,null);n.default=e.exports}}]);